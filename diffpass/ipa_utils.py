# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/ipa_utils.ipynb.

# %% auto 0
__all__ = ['get_robust_pairs']

# %% ../nbs/ipa_utils.ipynb 2
from collections import defaultdict

import numpy as np

# %% ../nbs/ipa_utils.ipynb 3
def get_robust_pairs(
    all_hard_perms: list[list[list[np.ndarray]]], cutoff: float = 1.0
) -> list[list[tuple[int, int]]]:
    group_sizes = [len(hp) for hp in all_hard_perms[0][0]]
    run_length = len(all_hard_perms)
    absolute_cutoff = cutoff * run_length

    all_pairings = defaultdict(int)
    for hard_perms_this_iter in all_hard_perms:
        for group_idx in range(len(group_sizes)):
            for idx, mapped_idx in enumerate(hard_perms_this_iter[-1][group_idx]):
                all_pairings[(group_idx, mapped_idx, idx)] += 1

    sorted_keys = sorted(all_pairings, key=lambda x: all_pairings[x], reverse=True)
    all_pairings_sorted = {k: all_pairings[k] for k in sorted_keys}

    idx_robust_pairs = 0
    for v in all_pairings_sorted.values():
        if v >= absolute_cutoff:
            idx_robust_pairs += 1
        else:
            break

    robust_pairs_by_group = [[] for _ in range(len(group_sizes))]

    for group_and_pairing_idxs in list(all_pairings_sorted)[:idx_robust_pairs]:
        group_idx, mapped_idx, idx = group_and_pairing_idxs
        robust_pairs_by_group[group_idx].append((mapped_idx, idx))

    return robust_pairs_by_group
